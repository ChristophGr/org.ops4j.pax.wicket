    ----------------------------
    Writing Application services
    ----------------------------
    Niclas Hedhman
    ----------------------------
    2007 January 15
    ----------------------------

Department Store Application

    The Application is the top-level <<view>> side of the larger application. The name <application> is inherited
    from Wicket, and is somewhat confusing in a larger context outside of Wicket.

    The Application establishes the Wicket execution environment, by providing;

     * The <<<RootContentAggregator>>> is a top-level <ContentAggregator> for <ContentSource>s to be wired to.

     * <<<OverviewPageFactory>>> is the model of the <<<OverviewPage>>>, which locates any About button and where the
       Floor content will be aggregated.

     * The <<<FloorTabPanel>>> is Wicket provided <<<TabbedPanel>>>, which shows one floor in each tab.

     * <<<OverviewPage>>> is the Wicket <<<WebPage>>> and is registered as the wicket home page class for the
       application, via the <<<PaxWicketApplicationFactory>>> creation and registration in the Activator class.

    The Activator needs to initialize the Pax Wicket application, and get everything running. Fortunately,
    that is fairly simple.

+------------------------------
public class Activator
    implements BundleActivator
{

    private RootContentAggregator m_store;
    private ServiceRegistration m_serviceRegistration;
    private ServiceRegistration m_pageRegistration;
    private PaxWicketApplicationFactory m_applicationFactory;
    private OverviewPageFactory m_overviewPageFactory;

    public void start( BundleContext bundleContext )
        throws Exception
    {
        String mountPoint = "deptStore";
        String applicationName = "departmentstore";
        m_store = new RootContentAggregator( bundleContext, "swp", applicationName );
        m_pageRegistration = m_store.register();

        m_overviewPageFactory = new OverviewPageFactory( bundleContext, m_store, applicationName, "overview" );
        m_overviewPageFactory.register();

        m_applicationFactory =
            new PaxWicketApplicationFactory( bundleContext, OverviewPage.class, mountPoint, applicationName );

        m_applicationFactory.setDeploymentMode( true );
        m_serviceRegistration = m_applicationFactory.register();
    }

    public void stop( BundleContext bundleContext )
        throws Exception
    {
        m_pageRegistration.unregister();
        m_serviceRegistration.unregister();
        m_overviewPageFactory.dispose();
        m_store.dispose();
        m_applicationFactory.dispose();
    }

}
+------------------------------

    We need to provide a Wicket IPagefactory, since our HomePage does not have a default constructor.
    We create a <RootContentAggregator>, which is a <ContentAggregator> that itself is not a ContentSource.
    The <RootContentAggregator> is passed to the <<<OverviewPage>>> view the <<<createPage()>>> method in
    <<<OverviewPageFactory>>> (see below).  

    We then create and register the PaxWicketApplicationFactory under a URL mountpoint of "swp".

    The <<<OverviewPageFactory>>> mentioned above is responsible for creating the home page, by implementing
    <PageFactory>.

+------------------------------
public class OverviewPageFactory extends AbstractPageFactory<OverviewPage>
    implements PageFactory<OverviewPage>
{
    private BundleContext m_context;
    private RootContentAggregator m_aggregator;

    public OverviewPageFactory( BundleContext context, RootContentAggregator aggregator, String applicationName, String pageName )
    {
        super(context, "overview", applicationName, pageName );
        m_context = context;
        m_aggregator = aggregator;
    }

    public Class<OverviewPage> getPageClass()
    {
        return OverviewPage.class;
    }

    public OverviewPage createPage( PageParameters params )
    {
        PageFactory<Page>[] pageSources = PageFinder.findPages( m_context, "departmentstore", "about" );
        Class pageClass;
        if( pageSources.length == 0 )
        {
            pageClass = null;
        }
        else
        {
            pageClass = pageSources[ 0 ].getPageClass();
        }
        return new OverviewPage( m_aggregator, "Sungei Wang Plaza", pageClass );
    }
}
+------------------------------

    The <<<OverviewPage>>> uses AjaxTabbedPanels and we create an interface to represent this. This interface
    will be used by the Floor bundle, and allows us to create the tabs independently of each other, and
    potentially have other tabs than the floors later on.

+------------------------------
public interface OverviewTabContent
{
    /**
     * The tab identifier.
     *
     * @return The tab identifier.
     * @since 1.0.0
     */
    String getTabId();

    /**
     * Create the tab given the specified {@code locale} as the locale of the displayed tab item label. This method must
     * not return {@code null} object.
     *
     * @param locale The locale for the tab item label. This argument must not be {@code null}.
     * @return A new abstract tab.
     *
     * @since 1.0.0
     */
    AbstractTab createTab( Locale locale );
}
+------------------------------


    The OverviewPage is then the last piece needed.

+------------------------------
final class OverviewPage extends WebPage
{

    private static final long serialVersionUID = 1L;

    private static final String WICKET_ID_LABEL = "storeName";

    @SuppressWarnings( "unchecked" )
    public OverviewPage( RootContentAggregator container, String storeName, Class aboutPageClass )
    {
        Label label = new Label( WICKET_ID_LABEL, storeName );
        add( label );
        Component link;
        if( aboutPageClass == null )
        {
            link = new Label( "aboutlink", "" );
        }
        else
        {
            link = new BookmarkablePageLink( "aboutlink", aboutPageClass );
        }
        add( link );

        Locale locale = getLocale();
        List<ContentSource<Component>> contents = container.getContents( "floor" );
        int numberOfContents = contents.size();
        List<AbstractTab> tabs = new ArrayList<AbstractTab>( numberOfContents );
        for( ContentSource content : contents )
        {
            if( content instanceof OverviewTabContent )
            {
                OverviewTabContent otc = (OverviewTabContent) content;
                AbstractTab tab = otc.createTab( locale );
                tabs.add( tab );
            }
        }

        if( tabs.isEmpty() )
        {
            Label niceMsg = new Label( "floors", "No Floors installed yet." );
            add( niceMsg );
        }
        else
        {
            AjaxTabbedPanel tabbedPanel = new AjaxTabbedPanel( "floors", tabs );
            add( tabbedPanel );
        }
    }
}
+------------------------------

    We instantiate a Wicket Label to display the name of the department store. And again, we are passed the
    ContentAggregator in the constructor (in this case a RootContentAggregator instance), which we use to
    create the Wicket Components needed for the Page (and as explained earlier, the createComponents() method
    will delegate down the ContentAggregator chain to the leaves).

    We have earlier stored the Floor name in the Model of the Floor, to avoid a dependency. That Floor name is
    used as the title of the Tab, and we just follow the Wicket pattern to create tabs.

    We then check if there were any floors, if not put a simple text message about that, otherwise instantiate
    a AjaxTabbedPanel named "floors" to be injected into our html (seen below).

+------------------------------
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:wicket="http://wicket.sourceforge.net/" xml:lang="en" lang="en">
<head>
		<link rel="stylesheet" type="text/css" href="stylesheets/style.css"></link>
 </head>
<body>
    <h3><span wicket:id="storeName">StoreName goes here</span></h3>
    <p>
        <a wicket:id="aboutlink" class="history-link">History</a>
    </p>
    <p>
        <div wicket:id="floors" class="floorpanel" ></div>
    </p>
</body>
</html>
+------------------------------

Bundle Manifest

    There is nothing much different in this bundle manifest from the others.

+------------------------------
Manifest-Version: 1.0
Bundle-ManifestVersion: 2
Bundle-Name: Applaction Plug-in
Bundle-SymbolicName: org.ops4j.pax.wicket.sample.departmentstore.application
Bundle-Version: 1.0.0
Bundle-Vendor: OPS4J
Bundle-Localization: plugin
Bundle-Activator: org.ops4j.pax.wicket.samples.departmentstore.view.internal.Activator
Import-Package: org.ops4j.pax.wicket.api;version="[1.0.0,1.1.0)",
 org.ops4j.pax.wicket.util;version="[1.0.0,1.1.0)",
 org.osgi.framework;version="1.3.0",
 org.osgi.service.cm;version="[1.0.0,2.0.0)",
 wicket;version="[1.2.0,1.3.0)",
 wicket.authorization.strategies.role.annotations;version="[1.2.0,1.3.0)",
 wicket.extensions.ajax.markup.html.tabs;version="[1.2.0,1.3.0)",
 wicket.extensions.markup.html.tabs;version="[1.2.0,1.3.0)",
 wicket.markup.html;version="[1.2.0,1.3.0)",
 wicket.markup.html.basic;version="[1.2.0,1.3.0)",
 wicket.markup.html.link;version="[1.2.0,1.3.0)",
 wicket.markup.html.panel;version="[1.2.0,1.3.0)",
 wicket.model;version="[1.2.0,1.3.0)"
Export-Package: org.ops4j.pax.wicket.samples.departmentstore.view;version="1.0.0"
+------------------------------

    The manifest is built by Maven and the maven-osgi-plugin. The pom.xml required for this bundle can be
    found {{{https://scm.ops4j.org/repos/ops4j/projects/pax/wicket/samples/department-store/application/pom.xml}here}}.

    We import the same stuff as in the ContentSource case, i.e. OSGi framework, Pax Logging if needed, Pax
    Wicket Service and the relevant Wicket packages being used.

    We <<export>> the <<<org.ops4j.pax.wicket.samples.departmentstore.view>>> since we need the
    <<<OverviewTabContent>>> interface in the Floor bundle.

Conclusion

    We have seen above that there is not very much that is needed to be done to get the main infrastructure up.

    It is important to note that the creation of a <<<PaxWicketApplicationFactory>>> instance, instantiates both
    a servlet and an entire Wicket instance. So, it is important to organize a Pax Wicket application around a
    single infrastructure that defines the <<<PaxWicketApplicationFactory>>> and the shared resources.

